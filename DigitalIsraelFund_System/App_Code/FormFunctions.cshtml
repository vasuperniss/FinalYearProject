@using DigitalIsraelFund_System.Models


@helper DrawComponent(FormComponent w, bool isPosted, List<string> fields, Dictionary<string, string> values)
{
switch (w.Type)
{
    case "text":
        @DrawText(w, isPosted, fields, values);
        break;
    case "table":
        @DrawTable(w, isPosted, fields, values);
        break;
    case "row":
        @DrawRow(w, isPosted, fields, values);
        break;
    case "col":
        @DrawCol(w, isPosted, fields, values);
    break;
    case "input":
        if (!isPosted)
        {
            @DrawInput(w, fields, values);
        } else
        {
            @DrawInputFilled(w, values);
        }
    break;
}
}


@helper DrawText(FormComponent w, bool isPosted, List<string> fields, Dictionary<string, string> values)
{
var weight = w.Properties.ContainsKey("weight") ? w.Properties["weight"] : "600";
var size = w.Properties.ContainsKey("size") ? w.Properties["size"] : "small";
var color = w.Properties.ContainsKey("color") ? w.Properties["color"] : "#333333";
var margin = w.Properties.ContainsKey("margin") ? w.Properties["margin"] + "px" : "0px";
var fillOnly = w.Properties.ContainsKey("fillOnly") ? w.Properties["fillOnly"] : "true";
if (!isPosted || fillOnly == "true")
{
    <div style="font-size:@size; font-weight:@weight; color:@color; margin:@margin;">@w.Text</div>
}
}


@helper DrawTable(FormComponent w, bool isPosted, List<string> fields, Dictionary<string, string> values)
{
var id = w.Properties.ContainsKey("id") ? w.Properties["id"] : "";
var borderColor = w.Properties.ContainsKey("color") ? w.Properties["color"] : "#ccc";
    <table id="@id" style="padding:5px 5px;border: 1px solid @borderColor;margin-bottom:10px;width:100%;">
        @foreach (FormComponent subW in w.FormComponents)
        {
            @DrawComponent(subW, isPosted, fields, values);
        }
    </table>
}


@helper DrawRow(FormComponent w, bool isPosted, List<string> fields, Dictionary<string, string> values)
{
var color = w.Properties.ContainsKey("color") ? w.Properties["color"] : "#ffffff";
    <tr style="background-color:@color;">
        @foreach (FormComponent subW in w.FormComponents)
        {
            @DrawComponent(subW, isPosted, fields, values);
        }
    </tr>
}


@helper DrawCol(FormComponent w, bool isPosted, List<string> fields, Dictionary<string, string> values)
{
var span = w.Properties.ContainsKey("span") ? w.Properties["span"] : "1";
var color = w.Properties.ContainsKey("color") ? w.Properties["color"] : "null";
    <td align="center" style="font-size:small;padding:3px;border: 0px solid #ff0000;vertical-align:central;background-color:@color;" colspan="@span ">
        @foreach (FormComponent subW in w.FormComponents)
        {
            @DrawComponent(subW, isPosted, fields, values);
        }
    </td>
}


@helper DrawInput(FormComponent w, List<string> fields, Dictionary<string, string> values)
{
var id = w.Properties["id"];
var required = w.Properties.ContainsKey("required") ? w.Properties["required"] : "false";
var range = w.Properties.ContainsKey("range") ? w.Properties["range"] : "Letters";
var value = values.ContainsKey(id) ? values[id] : "";
var readOnly = w.Properties.ContainsKey("readOnly");
var readOnlyString = readOnly ? "readonly" : "";

if (w.Properties["type"] == "radio")
{
    foreach (FormComponent subW in w.FormComponents)
    {
        <input form="textForm" class="form-control" id="@id" name="Values[@id]" type="radio" value="@subW.Text" onchange="validate('@id',@required,'@range', false);" />
        <label for="@subW.Text">@subW.Text</label>
    }
}
else if (w.Properties["type"] == "checkbox")
{
    <input form="textForm" class="form-control" id="@id" name="Values[@id]" type="checkbox" onchange="validate('@id',@required,'@range', false);" />
    <label for="@id">@w.Text</label>
}
else if (w.Properties["type"] == "dropdown")
{
    <select form="textForm" class="form-control" style="border-right-color: #38ACEC;border-right-width: 3px;height:100%;" id="@id" name="Values[@id]"
            onchange="validate('@id',@required,'@range', false);">
        @foreach (FormComponent option in w.FormComponents)
        {
            <option value="@option.Text">@option.Text</option>
        }
    </select>
}
else if (w.Properties["type"] == "multiline")
{
    <textarea form="textForm" class="form-control" style="border-right-color: #38ACEC;border-right-width: 3px;height:100%;min-width: 100%;"
            rows="6" id="@id" name="Values[@id]" oninput="validate('@id',@required,'@range', false);">@value</textarea>
}
else if (w.Properties["type"] == "file")
{
    var width = w.Properties.ContainsKey("width") ? w.Properties["width"] + "px" : "160px";
    <input form="textForm" class="form-control" style="border-right-color: #38ACEC;border-right-width: 3px;height:100%;width:@width;"
            id="@id" name="Files[@id]" type="file" value="" oninput="validate('@id',@required,'@range', false);" />
}
else
{
    var width = w.Properties.ContainsKey("width") ? w.Properties["width"] + "px" : "160px";
    <input form="textForm" class="form-control form-control-sm" style="border-right-color: #38ACEC;border-right-width: 3px;height:100%;width:@width;"
            id="@id" name="Values[@id]" type="@w.Properties["type"]" value="@value" oninput="validate('@id', @required, '@range', false);" @readOnlyString />
}

fields.Add(id + "|" + required + "|" + range);
    <div id="@id-ErrMsg" style="display:none;color:red;">לא בפורמט המתאים</div>
}


@helper DrawInputFilled(FormComponent w, Dictionary<string, string> values)
{
var id = w.Properties["id"];
var val = values[id];
var color = "#85929E";
if (val == "")
{
    val = "לא מולא.";
}
else
{
    color = "#34495E";
}
    <span style="padding:2px;font-size:small; font-weight:500; color:@color;">@val</span>
}