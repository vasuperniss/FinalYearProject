@model DigitalIsraelFund_System.Models.FormComponent
@using DigitalIsraelFund_System.Models
@{
    ViewBag.Title = "הגשת טופס";

    FormComponent root = Model;
    List<FormComponent> pages = root.FormComponents;
}

@functions {
    private List<string> fields = new List<string>();
    private Dictionary<string, string> repeatables = new Dictionary<string, string>();
    private Stack<string> workRepeatables = new Stack<string>();
    private string repeatableIds = "";
}

<script src="~/Scripts/validation.js"></script>

<style>
    div.tab {
        direction: rtl;
        overflow: hidden;
        border: 0px solid #888;
        background-color: #E3E4FA;
        width: 85%;
        margin: auto;
    }

        /* Style the buttons inside the tab */
        div.tab button {
            background-color: inherit;
            float: right;
            border: none;
            outline: none;
            cursor: pointer;
            padding-right: 8px;
            padding-left: 8px;
            padding-bottom: 8px;
            transition: 0.3s;
            font-size: 12px;
            font-weight: bold;
        }

            /* Change background color of buttons on hover */
            div.tab button:hover {
                background-color: #87AFC7;
            }

            /* Create an active/current tablink class */
            div.tab button.active {
                background-color: #82CAFA;
            }

    /* Style the tab content */
    .tabcontent {
        display: none;
        padding: 12px 12px;
        border: 1px solid #ccc;
        border-top: none;
        align-items: center;
        width: 85%;
        margin: auto;
    }

    .ta2bcontent2 {
        padding: 12px 12px;
        border: 1px solid #ccc;
        border-top: none;
        align-items: center;
        width: 85%;
        margin: auto;
    }
</style>

@helper DrawComponent(FormComponent w)
{
switch (w.Type)
{
    case "text":
            @DrawText(w);
            break;
        case "table":
            @DrawTable(w);
            break;
        case "row":
            @DrawRow(w);
            break;
        case "col":
            @DrawCol(w);
            break;
        case "input":
            @DrawInput(w);
            break;
        case "repeatable":
            @DrawRepeatAble(w);
            break;
        case "repeater":
            @DrawRepeater(w);
            break;
        case "del":
            @DrawDeleter(w);
            break;
        case "index":
            @DrawIndexer(w);
            break;
    }
}

@helper DrawText(FormComponent w)
{
var weight = w.Properties.ContainsKey("weight") ? w.Properties["weight"] : "600";
var size = w.Properties.ContainsKey("size") ? w.Properties["size"] : "small";
var color = w.Properties.ContainsKey("color") ? w.Properties["color"] : "#333333";
var margin = w.Properties.ContainsKey("margin") ? w.Properties["margin"] + "px" : "0px";
    <div style="font-size:@size; font-weight:@weight; color:@color; margin:@margin;">@w.Text</div>
}

@helper DrawTable(FormComponent w)
{
var id = w.Properties.ContainsKey("id") ? w.Properties["id"] : "";
var borderColor = w.Properties.ContainsKey("color") ? w.Properties["color"] : "#ccc";
id += this.repeatableIds;
    <table id="@id" style="padding:5px 5px;border: 1px solid @borderColor;margin-bottom:10px;width:100%;">
        @foreach (FormComponent subW in w.FormComponents)
        {
            @DrawComponent(subW);
        }
    </table>
}

@helper DrawRow(FormComponent w)
{
var color = w.Properties.ContainsKey("color") ? w.Properties["color"] : "#ffffff";
    <tr style="background-color:@color;">
        @foreach (FormComponent subW in w.FormComponents)
        {
            @DrawComponent(subW);
        }
    </tr>
}

@helper DrawCol(FormComponent w)
{
var span = w.Properties.ContainsKey("span") ? w.Properties["span"] : "1";
var color = w.Properties.ContainsKey("color") ? w.Properties["color"] : "null";
    <td align="center" style="font-size:small;padding:3px;border: 0px solid #ff0000;vertical-align:central;background-color:@color;" colspan="@span ">
        @foreach (FormComponent subW in w.FormComponents)
        {
            @DrawComponent(subW);
        }
    </td>
}

@helper DrawRepeatAble(FormComponent w)
{
var id = w.Properties.ContainsKey("id") ? w.Properties["id"] : "";
var pasteTo = w.Properties.ContainsKey("pasteTo") ? w.Properties["pasteTo"] : "";
var addition = "_{" + id + "}";
this.repeatableIds += addition;
var repeated = "";
foreach (FormComponent subW in w.FormComponents)
{
    repeated += @DrawComponent(subW);
}
var indexStr = repeatableIds.Replace("{", "{Index");
this.repeatableIds = this.repeatableIds.Substring(0, this.repeatableIds.Length - addition.Length);
repeatables.Add(id, repeated);
    @Html.Raw(repeated.Replace(addition, "_1").Replace(indexStr, "1"));
}

@helper DrawDeleter(FormComponent w)
{
var id = w.Properties.ContainsKey("id") ? w.Properties["id"] : "";
var delFrom = w.Properties.ContainsKey("delFrom") ? w.Properties["delFrom"] : "";
    <button type="button" onclick="delete_fn('@id', '@repeatableIds.Replace("_{"+id+"}","")','@delFrom','@this.repeatableIds.Replace("{","{Index")');" style="background-color:tomato;color:white;border:none;border-radius:16px;font-size:small;margin-top:2px;">x</button>
}

@helper DrawIndexer(FormComponent w)
{
var id = w.Properties.ContainsKey("id") ? w.Properties["id"] : "";
    <div style="font-weight:700;font-size:small;margin-top:4px;">@this.repeatableIds.Replace("{", "{Index")</div>
}

@helper DrawRepeater(FormComponent w)
{
var repeaterId = w.Properties.ContainsKey("repeaterId") ? w.Properties["repeaterId"] : "";
var pasteTo = w.Properties.ContainsKey("pasteTo") ? w.Properties["pasteTo"] : "";
pasteTo += repeatableIds;
    <input form="textForm" type="hidden" id="@repeaterId@repeatableIds" name="Values[@repeaterId@repeatableIds]" value="1" />
var father = repeatableIds.Length > 0 ? repeatableIds.Substring(2, repeatableIds.Length - 3) : "";
    <button type="button" onclick="repeat_fn('@repeaterId','@repeatableIds','@father','@pasteTo');"
            style="background-color:royalblue;color:white;border:solid;border-color:navy;border-width:1px;border-radius:2px;">
        @w.Text
    </button>
}

<script>
    function delete_fn(repId, repeatableIds, pasteTo, delLine) {
        var numberfield = document.getElementById(repId + repeatableIds);
        var count = parseInt(numberfield.value);
        if (count <= 1) {
            alert('חייבת להשאר לפחות רשומה אחת מסוג זה');
            return;
        }
        var container = document.getElementById(pasteTo + repeatableIds).children;
        for (i = delLine; i < count; i++) {
            var inputs1 = container[i-1].getElementsByClassName('myInput');
            var inputs2 = container[i].getElementsByClassName('myInput');
            for (j = 0; j < inputs2.length; j++) {
                if (inputs1[j].type == 'file')
                    inputs1[j].files = inputs2[j].files;
                else
                    inputs1[j].value = inputs2[j].value;
                inputs1[j].onchange();
            }
        }
        var last = container[container.length - 1];
        document.getElementById(pasteTo + repeatableIds).removeChild(last);
        numberfield.value = count - 1;
    }

    function repeat_fn(repId, repeatableIds, repeatableFather, pasteTo) {
        // check if previus fields are filled well
        var prevInputs = document.getElementById(pasteTo).getElementsByClassName('myInput');
        for (j = 0; j < prevInputs.length; j++)
            if (prevInputs[j].style.borderRightColor == 'rgb(255, 0, 0)') {
                alert(prevInputs[j].id);
                alert('לא ניתן להוסיף שורות לפני מילוי תקין של השדות הקודמים');
                return;
            }

        //numLines_ += 1;
        var newcontent = document.createElement('tr');
        //newcontent.id = id + numLines_;
        var str = repeatables[repId];
        var numberfield = document.getElementById(repId + repeatableIds);
        numberfield.value = parseInt(numberfield.value) + 1;
        var numberfather = document.getElementById(repeatableFather);
        if (numberfather != null) {
            str = str.replace(new RegExp('{' + repeatableFather + '}', 'g'), numberfather.value)
                    .replace(new RegExp('_{Index' + repeatableFather + '}', 'g'), "");
        }
        newcontent.innerHTML = str.replace(new RegExp('{' + repId + '}', 'g'), numberfield.value)
                .replace(new RegExp('_{Index' + repId + '}', 'g'), numberfield.value);;
        document.getElementById(pasteTo).appendChild(newcontent);
        var inputs = newcontent.getElementsByClassName('myInput');
        for (j = 0; j < inputs.length; j++) {
            inputs[j].onchange();
        }
    }
</script>

@helper DrawInput(FormComponent w)
{
var required = w.Properties.ContainsKey("required") ? w.Properties["required"] : "false";
var range = w.Properties.ContainsKey("range") ? w.Properties["range"] : "Letters";
var id = w.Properties["id"] + this.repeatableIds;
var pullFrom = w.Properties.ContainsKey("pullFrom") ? w.Properties["pullFrom"] : null;
var value = pullFrom != null ? ViewData[pullFrom] : "";
var readOnly = w.Properties.ContainsKey("readOnly");
var readOnlyString = readOnly ? "readonly" : "";
var temps = (Dictionary<string, string>)ViewData["temp"];
value = (string)value == "" && temps.ContainsKey(id) ? temps[id] : value;

if (w.Properties["type"] == "radio")
{
    foreach (FormComponent subW in w.FormComponents)
    {
            <input form="textForm" class="form-control" id="@id" name="Values[@id]" type="radio" value="@subW.Text" onchange="validate('@id',@required,'@range', false);" />
            <label for="@subW.Text">@subW.Text</label>
    }
}
else if (w.Properties["type"] == "checkbox")
{
        <input form="textForm" class="form-control" id="@id" name="Values[@id]" type="checkbox" onchange="validate('@id',@required,'@range', false);" />
        <label for="@id">@w.Text</label>
}
else if (w.Properties["type"] == "dropdown")
{
        <select form="textForm" class="form-control" style="border-right-color: #38ACEC;border-right-width: 3px;height:100%;" id="@id" name="Values[@id]"
                onchange="validate('@id',@required,'@range', false);">
            @foreach (FormComponent option in w.FormComponents)
{
                <option value="@option.Text">@option.Text</option>
            }
        </select>
}
else if (w.Properties["type"] == "multiline")
{
        <textarea form="textForm" class="form-control" style="border-right-color: #38ACEC;border-right-width: 3px;height:100%;min-width: 100%;"
                  rows="6" id="@id" name="Values[@id]"
                  oninput="validate('@id',@required,'@range', false);">@value</textarea>
}
else if (w.Properties["type"] == "file")
{
    var width = w.Properties.ContainsKey("width") ? w.Properties["width"] + "px" : "160px";
        <input form="textForm" class="form-control" style="border-right-color: #38ACEC;border-right-width: 3px;height:100%;width:@width;"
               id="@id" name="Files[@id]" type="file" value=""
               oninput="validate('@id',@required,'@range', false);" />
}
else
{
    var width = w.Properties.ContainsKey("width") ? w.Properties["width"] + "px" : "160px";
        <input form="textForm" class="form-control form-control-sm" style="border-right-color: #38ACEC;border-right-width: 3px;height:100%;width:@width;"
               id="@id" name="Values[@id]" type="@w.Properties["type"]" value="@value"
               oninput="validate('@id', @required, '@range', false);" @readOnlyString />
}
fields.Add(id + "|" + required + "|" + range);
    <div id="@id-ErrMsg" style="display:none;color:red;">לא בפורמט המתאים</div>
}

<div dir="rtl" style="font-family:sans-serif;">

    <table style="padding:5px 5px;border: 1px solid #ccc;margin:auto;width:85%;">
        <tr style="background-color:#E3E4FA;">
            @{
                Dictionary<string, string> line = (Dictionary<string, string>)ViewData["request"];
                Dictionary<string, string> names = (Dictionary<string, string>)ViewData["names"];
                foreach (string key in names.Keys)
                {
                    <td style="padding:3px;font-size:small;font-weight:600;text-align:center;vertical-align:bottom;">
                        @names[key]
                    </td>
                }
            }
        </tr>
        <tr>
            @{
                foreach (string key in names.Keys)
                {
                    <td style="padding:3px;font-weight:500;text-align:center;vertical-align:bottom;">
                        @line[key]
                    </td>
                }
            }
        </tr>
    </table>
    <br />

    @using (Html.BeginForm((string)ViewData["postToController"], "GovExp", FormMethod.Post, new { id = "textForm", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="tab">
            <input form="textForm" name="Values[file_version]" type="hidden" value="@ViewData["file_version"]" />
            <input form="textForm" id="isSave" name="Values[isSave]" type="hidden" value="false" />
            @for (int p = 0; p < pages.Count; ++p)
            {
                <button type="button" class="tablinks" onclick="openTab(event, 't-@p')" id='t-b-@p'>
                    <div style="padding-top:12px;padding-bottom:2px;">@pages[p].Properties["title"]</div>
                </button>
            }
            <button type="button" onclick="validateAndSubmit();" id='sumbitBtn' style="background-color:lightgreen;float:left;border-top-right-radius:10px;">
                <div style="padding:8px;padding-top:12px;padding-bottom:2px;">@ViewData["sendBtnTitle"]</div>
            </button>
            <button type="button" onclick="saveSubmit();" id='saveBtn' style="background-color:lightblue;float:left;border-top-right-radius:10px;">
                <div style="padding:8px;padding-top:12px;padding-bottom:2px;">שמור משוב</div>
            </button>
        </div>
        for (int p = 0; p < pages.Count; ++p)
        {
            FormComponent page = pages[p];
            <div id="t-@p" class="tabcontent">
                @foreach (FormComponent w in page.FormComponents)
                {
                    @DrawComponent(w);
                }
            </div>
        }
    }
</div>

<script>
    var repeatables = {};
    var fieldIds = [];

    @foreach (string inputId in fields)
    {
        var spited = inputId.Split('|');
        @Html.Raw(System.Web.HttpUtility.HtmlDecode("\tfieldIds.push(['" + spited[0] + "'," + spited[1] + ",'" + spited[2] + "']);\n"));
    }

    @foreach (string key in repeatables.Keys)
    {
        var repeated = this.repeatables[key];
        @Html.Raw(System.Web.HttpUtility.HtmlDecode("\trepeatables['" + key + "'] = '" + repeated.Replace("'","\\'").Replace("\n", "").Replace("\r", "") + "';\n"));
    }

    function validate(inputId, isRequired, range, markParent) {
        var inpControl = document.getElementById(inputId);
        var val = inpControl.value;
        if (range == "CheckBox" && isRequired && !inpControl.checked) {
            inpControl.style.borderRightColor = '#ff0000';
        }
        else if (isRequired && val == "") {
            inpControl.style.borderRightColor = '#ff0000';
            $("#" + inputId + "-ErrMsg").fadeOut(300);
        } else {
            validateInput(inputId, range);
        }
    }

    function openTab(evt, tabName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        $('#' + tabName).fadeIn(150);
        evt.currentTarget.className += " active";
    }

    document.getElementById("t-0").style.display = "block";
    document.getElementById("t-b-0").className += " active";
    RunThrewAllInputs(miniCheckAll, false);

    function RunThrewAllInputs(checkFnc, isSubmited) {
        var numErrors = 0;
        for (i = 0; i < fieldIds.length; i++) {
            var patt1 = /{[a-z0-9]+}/ig;
            repetContainers = fieldIds[i][0].match(patt1);
            if (repetContainers == null) {
                numErrors += checkFnc(fieldIds[i], isSubmited);
            }
            else {
                var id = fieldIds[i][0];
                if (repetContainers.length == 1) {
                    var curr = 1;
                    while (document.getElementById(id.replace(repetContainers[0], curr)) != null) {
                        numErrors += checkFnc([id.replace(repetContainers[0], curr), fieldIds[i][1], fieldIds[i][2]], isSubmited);
                        curr += 1;
                    }
                } else if (repetContainers.length == 2) {
                    var currF = 1;
                    var hasSons = false;
                    do {
                        hasSons = false;
                        var currS = 1;
                        newId = id.replace(repetContainers[0], currF).replace(repetContainers[1], currS);
                        while (document.getElementById(newId) != null) {
                            hasSons = true;
                            numErrors += checkFnc([newId, fieldIds[i][1], fieldIds[i][2]], isSubmited);
                            currS += 1;
                            newId = id.replace(repetContainers[0], currF).replace(repetContainers[1], currS);
                        }
                        currF += 1;
                    } while (hasSons);
                }
            }
        }
        return numErrors;
    }

    function miniCheckAll(field, isSubmited) {
        var inpControl = document.getElementById(field[0]);
        var val = inpControl.value;
        if (field[1] && val == "") {
            document.getElementById(field[0]).style.borderRightColor = '#ff0000';
        }
        return 0;
    }

    function checkIfBlue(field, isSubmited) {
        var inpControl = document.getElementById(field[0]);
        var val = inpControl.value;
        if (inpControl.style.borderRightColor == 'rgb(255, 0, 0)')
            return 1;
        return 0;
    }

    function validateAndSubmit() {
        var numErrs = RunThrewAllInputs(checkIfBlue, true);
        if (numErrs == 0) {
            $('#textForm').submit();
        } else {
            alert('לא כל השדות מולאו כנדרש, יש ' + numErrs + ' שדות שלא מולאו כנדרש');
        }
    }

    function saveSubmit() {
        document.getElementById('isSave').value = "true";
        $('#textForm').submit();
    }
</script>